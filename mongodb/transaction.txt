方案一：普通状态
给每个需要事务处理的文档设置一个状态量，如完成，进行中，失败，在事务处理完毕后统一更新文档的状态！

方案二：作业队列
方案一种需要为每个文档设置一个状态标志？如果需要控制的事务文档非常多的情况下会难管理！这里我们采用
另一种方案：创建一个TODO事务集合（collection）用来记录每次的更新的记录并设置状态量，如：为某个用户
账户添加金额，我们为这次事件生成一个TODO（如：为A添加100，B减少100的记录），然后设置该TODO为正在更
新状态并处理用户A，B的文档，完成后再次标记该TODO为完成状态。

方案三：
二阶段提交

方案四：日志回滚
是之前在P2P工作中用到的方案：日志回滚。给每个事务文档如用户文档添加一个‘流水记录’，假如，用户A给用户B
充值100，那么对应需要操作AB两个用户的金额，我们为这次操作生成一个记录。
{ _id: ObjectId, ts: timestamp , proc: "UNCOMMITTED", state: "VALID", changes:
    [
        { account: 1234, type: "withdraw", value: -100, seqId: 801, cachedBal: null },
        { account: 2345, type: "deposit",  value: 100,  seqId: 203, cachedBal: null }
    ] 
}
seqId确保每个事务日志的写入原子性。
